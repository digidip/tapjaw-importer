"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQueryStringSecurity = exports.createJWTSecurity = exports.createOAuthRefreshSecurity = exports.createOAuthSecurity = exports.createPrefetchTokenAuthorizationHeadersSecurity = exports.createQueryParamterPrefetchTokenSecurity = exports.createCustomHeadersSecurity = exports.createCustomHeaderSecurity = exports.createSimpleAuthorizationHeaderSecurity = exports.createBearerSecurity = exports.createBasicSecurity = void 0;
const tslib_1 = require("tslib");
const apply_authorization_http_header_wrapper_1 = tslib_1.__importDefault(require("../authenticators/wrappers/apply-authorization-http-header-wrapper"));
const apply_oauth_authorization_http_header_wrapper_1 = tslib_1.__importDefault(require("../authenticators/wrappers/apply-oauth-authorization-http-header-wrapper"));
const apply_custom_http_header_wrapper_1 = tslib_1.__importDefault(require("../authenticators/wrappers/apply-custom-http-header-wrapper"));
const basic_auth_authenticator_1 = tslib_1.__importDefault(require("../authenticators/basic-auth-authenticator"));
const bearer_auth_authenticator_1 = tslib_1.__importDefault(require("../authenticators/bearer-auth-authenticator"));
const non_bearer_authorization_authenticator_1 = tslib_1.__importDefault(require("../authenticators/non-bearer-authorization-authenticator"));
const custom_header_authenticator_1 = tslib_1.__importDefault(require("../authenticators/custom-header-authenticator"));
const oauth_authenticator_1 = tslib_1.__importDefault(require("../authenticators/oauth-authenticator"));
const apply_jwt_http_header_wrapper_1 = tslib_1.__importDefault(require("../authenticators/wrappers/apply-jwt-http-header-wrapper"));
const apply_oauth_refresh_http_header_wrapper_1 = tslib_1.__importDefault(require("../authenticators/wrappers/apply-oauth-refresh-http-header-wrapper"));
const oauth_refresh_authenticator_1 = tslib_1.__importDefault(require("../authenticators/oauth-refresh-authenticator"));
const prefetch_token_authorization_header_authenticator_1 = tslib_1.__importDefault(require("../authenticators/prefetch-token-authorization-header-authenticator"));
const wrappers_1 = require("../authenticators/wrappers");
const authenticators_1 = require("../authenticators");
const query_string_authenticator_1 = tslib_1.__importDefault(require("../authenticators/query-string-authenticator"));
const apply_query_string_wrapper_1 = tslib_1.__importDefault(require("../authenticators/wrappers/apply-query-string-wrapper"));
const createBasicSecurity = (username, password) => new apply_authorization_http_header_wrapper_1.default(new basic_auth_authenticator_1.default(username, password));
exports.createBasicSecurity = createBasicSecurity;
const createBearerSecurity = (token) => new apply_authorization_http_header_wrapper_1.default(new bearer_auth_authenticator_1.default(token));
exports.createBearerSecurity = createBearerSecurity;
const createSimpleAuthorizationHeaderSecurity = (token) => new apply_authorization_http_header_wrapper_1.default(new non_bearer_authorization_authenticator_1.default(token));
exports.createSimpleAuthorizationHeaderSecurity = createSimpleAuthorizationHeaderSecurity;
const createCustomHeaderSecurity = (name, value) => new apply_custom_http_header_wrapper_1.default(new custom_header_authenticator_1.default([[name, value]]));
exports.createCustomHeaderSecurity = createCustomHeaderSecurity;
const createCustomHeadersSecurity = (headers) => new apply_custom_http_header_wrapper_1.default(new custom_header_authenticator_1.default(headers));
exports.createCustomHeadersSecurity = createCustomHeadersSecurity;
const createQueryParamterPrefetchTokenSecurity = (queryParameterName, hostname, uri, method, jsonPathToToken, queryParameters = {}, headers = {}) => new wrappers_1.ApplyTokenHttpUriWrapper(queryParameterName, new authenticators_1.PreauthUriTokenAuthenticator(hostname, uri, method, jsonPathToToken, queryParameters, headers));
exports.createQueryParamterPrefetchTokenSecurity = createQueryParamterPrefetchTokenSecurity;
const createPrefetchTokenAuthorizationHeadersSecurity = (apiKey, hostname, path, method) => new apply_authorization_http_header_wrapper_1.default(new prefetch_token_authorization_header_authenticator_1.default(apiKey, hostname, path, method));
exports.createPrefetchTokenAuthorizationHeadersSecurity = createPrefetchTokenAuthorizationHeadersSecurity;
const createOAuthSecurity = (clientId, clientSecret, hostname, path, postParams, method = 'POST', responseEncoding = 'utf8') => new apply_oauth_authorization_http_header_wrapper_1.default(new oauth_authenticator_1.default(clientId, clientSecret, hostname, path, postParams, method, responseEncoding));
exports.createOAuthSecurity = createOAuthSecurity;
const createOAuthRefreshSecurity = (clientId, clientSecret, hostname, path, postParams, method = 'POST', responseEncoding = 'utf8') => new apply_oauth_refresh_http_header_wrapper_1.default(new oauth_refresh_authenticator_1.default(clientId, clientSecret, hostname, path, postParams, method, responseEncoding));
exports.createOAuthRefreshSecurity = createOAuthRefreshSecurity;
const createJWTSecurity = (jwtBuilder) => {
    return new apply_jwt_http_header_wrapper_1.default(jwtBuilder);
};
exports.createJWTSecurity = createJWTSecurity;
const createQueryStringSecurity = (queryParameters) => {
    return new apply_query_string_wrapper_1.default(new query_string_authenticator_1.default(queryParameters));
};
exports.createQueryStringSecurity = createQueryStringSecurity;
