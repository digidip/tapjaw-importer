<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="752px" preserveAspectRatio="none" style="width:371px;height:752px;background:#00000000;" version="1.1" viewBox="0 0 371 752" width="371px" zoomAndPan="magnify"><defs><filter height="300%" id="f15iobcv4yumj7" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[5b61f1a6ab7ca68737705fcaea219bf6]
class Array<T>--><rect codeLine="4" fill="#FEFECE" filter="url(#f15iobcv4yumj7)" height="618.0234" id="Array&lt;T&gt;" style="stroke:#A80036;stroke-width:1.5;" width="350" x="7" y="120"/><ellipse cx="148.25" cy="136" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M144.6777,132.2651 L144.6777,130.1069 L152.0571,130.1069 L152.0571,132.2651 L149.5918,132.2651 L149.5918,140.3418 L152.0571,140.3418 L152.0571,142.5 L144.6777,142.5 L144.6777,140.3418 L147.1431,140.3418 L147.1431,132.2651 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="59" x="168.75" y="140.5352">Array&lt;T&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="356" y1="152" y2="152"/><ellipse cx="18" cy="163" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="85" x="27" y="166.6348">length : number</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="356" y1="172.9551" y2="172.9551"/><ellipse cx="18" cy="183.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="176" x="27" y="187.5898">at(index: number) : undefined | T</text><ellipse cx="18" cy="196.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="204" x="27" y="200.5449">concat(items: ConcatArray&lt;T&gt;[]) : T[]</text><ellipse cx="18" cy="209.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="229" x="27" y="213.5">concat(items: (T | ConcatArray&lt;T&gt;)[]) : T[]</text><ellipse cx="18" cy="222.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="324" x="27" y="226.4551">copyWithin(target: number, start: number, end: number) : T[]</text><ellipse cx="18" cy="235.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="27" y="239.4102">entries() : IterableIterator&lt;[number, T]&gt;</text><ellipse cx="18" cy="248.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="29" x="27" y="252.3652">every</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="240" x="56" y="252.3652">(predicate: Function, thisArg: any) : this is S[]</text><ellipse cx="18" cy="261.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="265.3203">every(predicate: Function, thisArg: any) : boolean</text><ellipse cx="18" cy="274.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="239" x="27" y="278.2754">fill(value: T, start: number, end: number) : T[]</text><ellipse cx="18" cy="287.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="25" x="27" y="291.2305">filter</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="205" x="52" y="291.2305">(predicate: Function, thisArg: any) : S[]</text><ellipse cx="18" cy="300.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="231" x="27" y="304.1855">filter(predicate: Function, thisArg: any) : T[]</text><ellipse cx="18" cy="313.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="21" x="27" y="317.1406">find</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="261" x="48" y="317.1406">(predicate: Function, thisArg: any) : undefined | S</text><ellipse cx="18" cy="326.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="27" y="330.0957">find(predicate: Function, thisArg: any) : undefined | T</text><ellipse cx="18" cy="339.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="27" y="343.0508">findIndex(predicate: Function, thisArg: any) : number</text><ellipse cx="18" cy="352.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="27" y="356.0059">flat&lt;A, D&gt;(depth: D) : FlatArray&lt;A, D&gt;[]</text><ellipse cx="18" cy="365.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="27" y="368.9609">flatMap&lt;U, This&gt;(callback: Function, thisArg: This) : U[]</text><ellipse cx="18" cy="378.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="27" y="381.916">forEach(callbackfn: Function, thisArg: any) : void</text><ellipse cx="18" cy="391.2363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="306" x="27" y="394.8711">includes(searchElement: T, fromIndex: number) : boolean</text><ellipse cx="18" cy="404.1914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="303" x="27" y="407.8262">indexOf(searchElement: T, fromIndex: number) : number</text><ellipse cx="18" cy="417.1465" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="420.7813">join(separator: string) : string</text><ellipse cx="18" cy="430.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="27" y="433.7363">keys() : IterableIterator&lt;number&gt;</text><ellipse cx="18" cy="443.0566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="322" x="27" y="446.6914">lastIndexOf(searchElement: T, fromIndex: number) : number</text><ellipse cx="18" cy="456.0117" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="23" x="27" y="459.6465">map</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="211" x="50" y="459.6465">(callbackfn: Function, thisArg: any) : U[]</text><ellipse cx="18" cy="468.9668" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="109" x="27" y="472.6016">pop() : undefined | T</text><ellipse cx="18" cy="481.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="27" y="485.5566">push(items: T[]) : number</text><ellipse cx="18" cy="494.877" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="168" x="27" y="498.5117">reduce(callbackfn: Function) : T</text><ellipse cx="18" cy="507.832" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="245" x="27" y="511.4668">reduce(callbackfn: Function, initialValue: T) : T</text><ellipse cx="18" cy="520.7871" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="37" x="27" y="524.4219">reduce</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="210" x="64" y="524.4219">(callbackfn: Function, initialValue: U) : U</text><ellipse cx="18" cy="533.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="196" x="27" y="537.377">reduceRight(callbackfn: Function) : T</text><ellipse cx="18" cy="546.6973" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="27" y="550.332">reduceRight(callbackfn: Function, initialValue: T) : T</text><ellipse cx="18" cy="559.6523" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="563.2871">reduceRight</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="210" x="92" y="563.2871">(callbackfn: Function, initialValue: U) : U</text><ellipse cx="18" cy="572.6074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="72" x="27" y="576.2422">reverse() : T[]</text><ellipse cx="18" cy="585.5625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="112" x="27" y="589.1973">shift() : undefined | T</text><ellipse cx="18" cy="598.5176" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="203" x="27" y="602.1523">slice(start: number, end: number) : T[]</text><ellipse cx="18" cy="611.4727" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="615.1074">some(predicate: Function, thisArg: any) : boolean</text><ellipse cx="18" cy="624.4277" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="167" x="27" y="628.0625">sort(compareFn: Function) : T[]</text><ellipse cx="18" cy="637.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="255" x="27" y="641.0176">splice(start: number, deleteCount: number) : T[]</text><ellipse cx="18" cy="650.3379" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="311" x="27" y="653.9727">splice(start: number, deleteCount: number, items: T[]) : T[]</text><ellipse cx="18" cy="663.293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="27" y="666.9277">toLocaleString() : string</text><ellipse cx="18" cy="676.248" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="27" y="679.8828">toString() : string</text><ellipse cx="18" cy="689.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="147" x="27" y="692.8379">unshift(items: T[]) : number</text><ellipse cx="18" cy="702.1582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="156" x="27" y="705.793">values() : IterableIterator&lt;T&gt;</text><ellipse cx="18" cy="715.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="170" x="27" y="718.748">[iterator]() : IterableIterator&lt;T&gt;</text><ellipse cx="18" cy="728.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="27" y="731.7031">[unscopables]() : Object</text><!--MD5=[5664b56fc48f45c883f47220d582106c]
class RelativeIndexable<T>--><rect codeLine="50" fill="#FEFECE" filter="url(#f15iobcv4yumj7)" height="52.9551" id="RelativeIndexable&lt;T&gt;" style="stroke:#A80036;stroke-width:1.5;" width="202" x="81" y="7"/><ellipse cx="114" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M110.4277,19.2651 L110.4277,17.1069 L117.8071,17.1069 L117.8071,19.2651 L115.3418,19.2651 L115.3418,27.3418 L117.8071,27.3418 L117.8071,29.5 L110.4277,29.5 L110.4277,27.3418 L112.8931,27.3418 L112.8931,19.2651 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="130" x="132" y="27.5352">RelativeIndexable&lt;T&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="82" x2="282" y1="39" y2="39"/><ellipse cx="92" cy="50" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="176" x="101" y="53.6348">at(index: number) : undefined | T</text><!--MD5=[dd8bd87c9a3d75c3f105f4bb1306b04a]
reverse link RelativeIndexable<T> to Array<T>--><path codeLine="53" d="M182,80.05 C182,91.68 182,105.09 182,119.72 " fill="none" id="RelativeIndexable&lt;T&gt;-backto-Array&lt;T&gt;" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="175,80.02,182,60.02,189,80.02,175,80.02" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[26d207e0b86109cdd98c9a1e64ceda27]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
interface "Array<T>" {
    +length : number
    +at(index: number) : undefined | T
    +concat(items: ConcatArray<T>[]) : T[]
    +concat(items: (T | ConcatArray<T>)[]) : T[]
    +copyWithin(target: number, start: number, end: number) : T[]
    +entries() : IterableIterator<[number, T]>
    +every<S>(predicate: Function, thisArg: any) : this is S[]
    +every(predicate: Function, thisArg: any) : boolean
    +fill(value: T, start: number, end: number) : T[]
    +filter<S>(predicate: Function, thisArg: any) : S[]
    +filter(predicate: Function, thisArg: any) : T[]
    +find<S>(predicate: Function, thisArg: any) : undefined | S
    +find(predicate: Function, thisArg: any) : undefined | T
    +findIndex(predicate: Function, thisArg: any) : number
    +flat<A, D>(depth: D) : FlatArray<A, D>[]
    +flatMap<U, This>(callback: Function, thisArg: This) : U[]
    +forEach(callbackfn: Function, thisArg: any) : void
    +includes(searchElement: T, fromIndex: number) : boolean
    +indexOf(searchElement: T, fromIndex: number) : number
    +join(separator: string) : string
    +keys() : IterableIterator<number>
    +lastIndexOf(searchElement: T, fromIndex: number) : number
    +map<U>(callbackfn: Function, thisArg: any) : U[]
    +pop() : undefined | T
    +push(items: T[]) : number
    +reduce(callbackfn: Function) : T
    +reduce(callbackfn: Function, initialValue: T) : T
    +reduce<U>(callbackfn: Function, initialValue: U) : U
    +reduceRight(callbackfn: Function) : T
    +reduceRight(callbackfn: Function, initialValue: T) : T
    +reduceRight<U>(callbackfn: Function, initialValue: U) : U
    +reverse() : T[]
    +shift() : undefined | T
    +slice(start: number, end: number) : T[]
    +some(predicate: Function, thisArg: any) : boolean
    +sort(compareFn: Function) : T[]
    +splice(start: number, deleteCount: number) : T[]
    +splice(start: number, deleteCount: number, items: T[]) : T[]
    +toLocaleString() : string
    +toString() : string
    +unshift(items: T[]) : number
    +values() : IterableIterator<T>
    +[iterator]() : IterableIterator<T>
    +[unscopables]() : Object
}
interface "RelativeIndexable<T>" {
    +at(index: number) : undefined | T
}
"RelativeIndexable<T>" <|- - "Array<T>"
@enduml

PlantUML version 1.2021.6(Fri May 14 09:09:51 CEST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>