<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="761px" preserveAspectRatio="none" style="width:458px;height:761px;background:#00000000;" version="1.1" viewBox="0 0 458 761" width="458px" zoomAndPan="magnify"><defs><filter height="300%" id="f16cztgi7ghrhy" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[19dc8ab47153196253a4514f436b1db9]
class RegExpMatchArray--><rect codeLine="4" fill="#FEFECE" filter="url(#f16cztgi7ghrhy)" height="656.8887" id="RegExpMatchArray" style="stroke:#A80036;stroke-width:1.5;" width="437" x="7" y="91"/><ellipse cx="166.75" cy="107" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M163.1777,103.2651 L163.1777,101.1069 L170.5571,101.1069 L170.5571,103.2651 L168.0918,103.2651 L168.0918,111.3418 L170.5571,111.3418 L170.5571,113.5 L163.1777,113.5 L163.1777,111.3418 L165.6431,111.3418 L165.6431,103.2651 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="109" x="187.25" y="111.5352">RegExpMatchArray</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="443" y1="123" y2="123"/><ellipse cx="18" cy="134" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="83" x="27" y="137.6348">groups : Object</text><ellipse cx="18" cy="146.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="81" x="27" y="150.5898">index : number</text><ellipse cx="18" cy="159.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="69" x="27" y="163.5449">input : string</text><ellipse cx="18" cy="172.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="85" x="27" y="176.5">length : number</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="443" y1="182.8203" y2="182.8203"/><ellipse cx="18" cy="193.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="201" x="27" y="197.4551">at(index: number) : undefined | string</text><ellipse cx="18" cy="206.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="254" x="27" y="210.4102">concat(items: ConcatArray&lt;string&gt;[]) : string[]</text><ellipse cx="18" cy="219.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="304" x="27" y="223.3652">concat(items: (string | ConcatArray&lt;string&gt;)[]) : string[]</text><ellipse cx="18" cy="232.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="411" x="27" y="236.3203">copyWithin(target: number, start: number, end: number) : RegExpMatchArray</text><ellipse cx="18" cy="245.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="240" x="27" y="249.2754">entries() : IterableIterator&lt;[number, string]&gt;</text><ellipse cx="18" cy="258.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="29" x="27" y="262.2305">every</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="240" x="56" y="262.2305">(predicate: Function, thisArg: any) : this is S[]</text><ellipse cx="18" cy="271.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="275.1855">every(predicate: Function, thisArg: any) : boolean</text><ellipse cx="18" cy="284.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="351" x="27" y="288.1406">fill(value: string, start: number, end: number) : RegExpMatchArray</text><ellipse cx="18" cy="297.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="25" x="27" y="301.0957">filter</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="205" x="52" y="301.0957">(predicate: Function, thisArg: any) : S[]</text><ellipse cx="18" cy="310.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="27" y="314.0508">filter(predicate: Function, thisArg: any) : string[]</text><ellipse cx="18" cy="323.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="21" x="27" y="327.0059">find</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="line-through" textLength="261" x="48" y="327.0059">(predicate: Function, thisArg: any) : undefined | S</text><ellipse cx="18" cy="336.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="27" y="339.9609">find(predicate: Function, thisArg: any) : undefined | string</text><ellipse cx="18" cy="349.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="27" y="352.916">findIndex(predicate: Function, thisArg: any) : number</text><ellipse cx="18" cy="362.2363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="27" y="365.8711">flat&lt;A, D&gt;(depth: D) : FlatArray&lt;A, D&gt;[]</text><ellipse cx="18" cy="375.1914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="27" y="378.8262">flatMap&lt;U, This&gt;(callback: Function, thisArg: This) : U[]</text><ellipse cx="18" cy="388.1465" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="27" y="391.7813">forEach(callbackfn: Function, thisArg: any) : void</text><ellipse cx="18" cy="401.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="331" x="27" y="404.7363">includes(searchElement: string, fromIndex: number) : boolean</text><ellipse cx="18" cy="414.0566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="328" x="27" y="417.6914">indexOf(searchElement: string, fromIndex: number) : number</text><ellipse cx="18" cy="427.0117" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="430.6465">join(separator: string) : string</text><ellipse cx="18" cy="439.9668" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="27" y="443.6016">keys() : IterableIterator&lt;number&gt;</text><ellipse cx="18" cy="452.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="347" x="27" y="456.5566">lastIndexOf(searchElement: string, fromIndex: number) : number</text><ellipse cx="18" cy="465.877" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="23" x="27" y="469.5117">map</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="211" x="50" y="469.5117">(callbackfn: Function, thisArg: any) : U[]</text><ellipse cx="18" cy="478.832" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="27" y="482.4668">pop() : undefined | string</text><ellipse cx="18" cy="491.7871" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="161" x="27" y="495.4219">push(items: string[]) : number</text><ellipse cx="18" cy="504.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="27" y="508.377">reduce(callbackfn: Function) : string</text><ellipse cx="18" cy="517.6973" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="295" x="27" y="521.332">reduce(callbackfn: Function, initialValue: string) : string</text><ellipse cx="18" cy="530.6523" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="37" x="27" y="534.2871">reduce</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="210" x="64" y="534.2871">(callbackfn: Function, initialValue: U) : U</text><ellipse cx="18" cy="543.6074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="27" y="547.2422">reduceRight(callbackfn: Function) : string</text><ellipse cx="18" cy="556.5625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="323" x="27" y="560.1973">reduceRight(callbackfn: Function, initialValue: string) : string</text><ellipse cx="18" cy="569.5176" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="573.1523">reduceRight</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="210" x="92" y="573.1523">(callbackfn: Function, initialValue: U) : U</text><ellipse cx="18" cy="582.4727" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="97" x="27" y="586.1074">reverse() : string[]</text><ellipse cx="18" cy="595.4277" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="137" x="27" y="599.0625">shift() : undefined | string</text><ellipse cx="18" cy="608.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="228" x="27" y="612.0176">slice(start: number, end: number) : string[]</text><ellipse cx="18" cy="621.3379" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="624.9727">some(predicate: Function, thisArg: any) : boolean</text><ellipse cx="18" cy="634.293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="254" x="27" y="637.9277">sort(compareFn: Function) : RegExpMatchArray</text><ellipse cx="18" cy="647.248" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="280" x="27" y="650.8828">splice(start: number, deleteCount: number) : string[]</text><ellipse cx="18" cy="660.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="361" x="27" y="663.8379">splice(start: number, deleteCount: number, items: string[]) : string[]</text><ellipse cx="18" cy="673.1582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="27" y="676.793">toLocaleString() : string</text><ellipse cx="18" cy="686.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="27" y="689.748">toString() : string</text><ellipse cx="18" cy="699.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="172" x="27" y="702.7031">unshift(items: string[]) : number</text><ellipse cx="18" cy="712.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="27" y="715.6582">values() : IterableIterator&lt;string&gt;</text><ellipse cx="18" cy="724.9785" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="195" x="27" y="728.6133">[iterator]() : IterableIterator&lt;string&gt;</text><ellipse cx="18" cy="737.9336" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="27" y="741.5684">[unscopables]() : Object</text><!--MD5=[99f32fa4e73f6681c1a0ac5117bd3ce1]
class Array--><rect codeLine="53" fill="#FEFECE" filter="url(#f16cztgi7ghrhy)" height="24.1328" id="Array" style="stroke:#A80036;stroke-width:1.5;" width="37" x="207" y="7"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="31" x="210" y="23.6016">Array</text><!--MD5=[285690861f0f3c75ac118093551120d8]
reverse link Array to RegExpMatchArray--><path codeLine="55" d="M225.5,51.36 C225.5,62.3 225.5,75.66 225.5,90.73 " fill="none" id="Array-backto-RegExpMatchArray" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="218.5,51.07,225.5,31.07,232.5,51.07,218.5,51.07" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7a478e137672878edd76c4ad2873f9a2]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
interface "RegExpMatchArray" {
    +groups : Object
    +index : number
    +input : string
    +length : number
    +at(index: number) : undefined | string
    +concat(items: ConcatArray<string>[]) : string[]
    +concat(items: (string | ConcatArray<string>)[]) : string[]
    +copyWithin(target: number, start: number, end: number) : RegExpMatchArray
    +entries() : IterableIterator<[number, string]>
    +every<S>(predicate: Function, thisArg: any) : this is S[]
    +every(predicate: Function, thisArg: any) : boolean
    +fill(value: string, start: number, end: number) : RegExpMatchArray
    +filter<S>(predicate: Function, thisArg: any) : S[]
    +filter(predicate: Function, thisArg: any) : string[]
    +find<S>(predicate: Function, thisArg: any) : undefined | S
    +find(predicate: Function, thisArg: any) : undefined | string
    +findIndex(predicate: Function, thisArg: any) : number
    +flat<A, D>(depth: D) : FlatArray<A, D>[]
    +flatMap<U, This>(callback: Function, thisArg: This) : U[]
    +forEach(callbackfn: Function, thisArg: any) : void
    +includes(searchElement: string, fromIndex: number) : boolean
    +indexOf(searchElement: string, fromIndex: number) : number
    +join(separator: string) : string
    +keys() : IterableIterator<number>
    +lastIndexOf(searchElement: string, fromIndex: number) : number
    +map<U>(callbackfn: Function, thisArg: any) : U[]
    +pop() : undefined | string
    +push(items: string[]) : number
    +reduce(callbackfn: Function) : string
    +reduce(callbackfn: Function, initialValue: string) : string
    +reduce<U>(callbackfn: Function, initialValue: U) : U
    +reduceRight(callbackfn: Function) : string
    +reduceRight(callbackfn: Function, initialValue: string) : string
    +reduceRight<U>(callbackfn: Function, initialValue: U) : U
    +reverse() : string[]
    +shift() : undefined | string
    +slice(start: number, end: number) : string[]
    +some(predicate: Function, thisArg: any) : boolean
    +sort(compareFn: Function) : RegExpMatchArray
    +splice(start: number, deleteCount: number) : string[]
    +splice(start: number, deleteCount: number, items: string[]) : string[]
    +toLocaleString() : string
    +toString() : string
    +unshift(items: string[]) : number
    +values() : IterableIterator<string>
    +[iterator]() : IterableIterator<string>
    +[unscopables]() : Object
}
class "Array"
hide "Array" circle
"Array" <|- - "RegExpMatchArray"
@enduml

PlantUML version 1.2021.6(Fri May 14 09:09:51 CEST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>