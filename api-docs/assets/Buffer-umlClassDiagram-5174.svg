<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1344px" preserveAspectRatio="none" style="width:694px;height:1344px;background:#00000000;" version="1.1" viewBox="0 0 694 1344" width="694px" zoomAndPan="magnify"><defs><filter height="300%" id="f1vu6ylr6pyop0" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[9e9737bed61a6b1d6b48b2052db5d4e5]
class Buffer--><rect codeLine="4" fill="#FEFECE" filter="url(#f1vu6ylr6pyop0)" height="1239.8672" id="Buffer" style="stroke:#A80036;stroke-width:1.5;" width="673" x="7" y="91"/><ellipse cx="322.25" cy="107" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M318.6777,103.2651 L318.6777,101.1069 L326.0571,101.1069 L326.0571,103.2651 L323.5918,103.2651 L323.5918,111.3418 L326.0571,111.3418 L326.0571,113.5 L318.6777,113.5 L318.6777,111.3418 L321.1431,111.3418 L321.1431,103.2651 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="34" x="342.75" y="111.5352">Buffer</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="679" y1="123" y2="123"/><ellipse cx="18" cy="134" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="27" y="137.6348">buffer : ArrayBufferLike</text><ellipse cx="18" cy="146.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="111" x="27" y="150.5898">byteLength : number</text><ellipse cx="18" cy="159.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="27" y="163.5449">byteOffset : number</text><ellipse cx="18" cy="172.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="27" y="176.5">BYTES_PER_ELEMENT : number</text><ellipse cx="18" cy="185.8203" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="85" x="27" y="189.4551">length : number</text><ellipse cx="18" cy="198.7754" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="147" x="27" y="202.4102">[toStringTag] : "Uint8Array"</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="679" y1="208.7305" y2="208.7305"/><ellipse cx="18" cy="219.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="211" x="27" y="223.3652">at(index: number) : undefined | number</text><ellipse cx="18" cy="232.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="647" x="27" y="236.3203">compare(target: Uint8Array, targetStart: number, targetEnd: number, sourceStart: number, sourceEnd: number) : number</text><ellipse cx="18" cy="245.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="520" x="27" y="249.2754">copy(target: Uint8Array, targetStart: number, sourceStart: number, sourceEnd: number) : number</text><ellipse cx="18" cy="258.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="341" x="27" y="262.2305">copyWithin(target: number, start: number, end: number) : Buffer</text><ellipse cx="18" cy="271.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="250" x="27" y="275.1855">entries() : IterableIterator&lt;[number, number]&gt;</text><ellipse cx="18" cy="284.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="27" y="288.1406">equals(otherBuffer: Uint8Array) : boolean</text><ellipse cx="18" cy="297.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="301.0957">every(predicate: Function, thisArg: any) : boolean</text><ellipse cx="18" cy="310.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="552" x="27" y="314.0508">fill(value: string | number | Uint8Array, offset: number, end: number, encoding: BufferEncoding) : Buffer</text><ellipse cx="18" cy="323.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="275" x="27" y="327.0059">filter(predicate: Function, thisArg: any) : Uint8Array</text><ellipse cx="18" cy="336.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="318" x="27" y="339.9609">find(predicate: Function, thisArg: any) : undefined | number</text><ellipse cx="18" cy="349.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="27" y="352.916">findIndex(predicate: Function, thisArg: any) : number</text><ellipse cx="18" cy="362.2363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="27" y="365.8711">forEach(callbackfn: Function, thisArg: any) : void</text><ellipse cx="18" cy="375.1914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="519" x="27" y="378.8262">includes(value: string | number | Buffer, byteOffset: number, encoding: BufferEncoding) : boolean</text><ellipse cx="18" cy="388.1465" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="543" x="27" y="391.7813">indexOf(value: string | number | Uint8Array, byteOffset: number, encoding: BufferEncoding) : number</text><ellipse cx="18" cy="401.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="27" y="404.7363">join(separator: string) : string</text><ellipse cx="18" cy="414.0566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="27" y="417.6914">keys() : IterableIterator&lt;number&gt;</text><ellipse cx="18" cy="427.0117" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="562" x="27" y="430.6465">lastIndexOf(value: string | number | Uint8Array, byteOffset: number, encoding: BufferEncoding) : number</text><ellipse cx="18" cy="439.9668" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="277" x="27" y="443.6016">map(callbackfn: Function, thisArg: any) : Uint8Array</text><ellipse cx="18" cy="452.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="207" x="27" y="456.5566">readBigInt64BE(offset: number) : bigint</text><ellipse cx="18" cy="465.877" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="207" x="27" y="469.5117">readBigInt64LE(offset: number) : bigint</text><ellipse cx="18" cy="478.832" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="27" y="482.4668">readBigUInt64BE(offset: number) : bigint</text><ellipse cx="18" cy="491.7871" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="27" y="495.4219">readBigUInt64LE(offset: number) : bigint</text><ellipse cx="18" cy="504.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="212" x="27" y="508.377">readDoubleBE(offset: number) : number</text><ellipse cx="18" cy="517.6973" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="212" x="27" y="521.332">readDoubleLE(offset: number) : number</text><ellipse cx="18" cy="530.6523" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="200" x="27" y="534.2871">readFloatBE(offset: number) : number</text><ellipse cx="18" cy="543.6074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="200" x="27" y="547.2422">readFloatLE(offset: number) : number</text><ellipse cx="18" cy="556.5625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="27" y="560.1973">readInt16BE(offset: number) : number</text><ellipse cx="18" cy="569.5176" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="27" y="573.1523">readInt16LE(offset: number) : number</text><ellipse cx="18" cy="582.4727" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="27" y="586.1074">readInt32BE(offset: number) : number</text><ellipse cx="18" cy="595.4277" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="27" y="599.0625">readInt32LE(offset: number) : number</text><ellipse cx="18" cy="608.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="183" x="27" y="612.0176">readInt8(offset: number) : number</text><ellipse cx="18" cy="621.3379" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="302" x="27" y="624.9727">readIntBE(offset: number, byteLength: number) : number</text><ellipse cx="18" cy="634.293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="302" x="27" y="637.9277">readIntLE(offset: number, byteLength: number) : number</text><ellipse cx="18" cy="647.248" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="27" y="650.8828">readUInt16BE(offset: number) : number</text><ellipse cx="18" cy="660.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="27" y="663.8379">readUInt16LE(offset: number) : number</text><ellipse cx="18" cy="673.1582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="27" y="676.793">readUInt32BE(offset: number) : number</text><ellipse cx="18" cy="686.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="27" y="689.748">readUInt32LE(offset: number) : number</text><ellipse cx="18" cy="699.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="191" x="27" y="702.7031">readUInt8(offset: number) : number</text><ellipse cx="18" cy="712.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="310" x="27" y="715.6582">readUIntBE(offset: number, byteLength: number) : number</text><ellipse cx="18" cy="724.9785" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="310" x="27" y="728.6133">readUIntLE(offset: number, byteLength: number) : number</text><ellipse cx="18" cy="737.9336" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="203" x="27" y="741.5684">reduce(callbackfn: Function) : number</text><ellipse cx="18" cy="750.8887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="315" x="27" y="754.5234">reduce(callbackfn: Function, initialValue: number) : number</text><ellipse cx="18" cy="763.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="37" x="27" y="767.4785">reduce</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="210" x="64" y="767.4785">(callbackfn: Function, initialValue: U) : U</text><ellipse cx="18" cy="776.7988" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="231" x="27" y="780.4336">reduceRight(callbackfn: Function) : number</text><ellipse cx="18" cy="789.7539" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="343" x="27" y="793.3887">reduceRight(callbackfn: Function, initialValue: number) : number</text><ellipse cx="18" cy="802.709" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="65" x="27" y="806.3438">reduceRight</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="210" x="92" y="806.3438">(callbackfn: Function, initialValue: U) : U</text><ellipse cx="18" cy="815.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="89" x="27" y="819.2988">reverse() : Buffer</text><ellipse cx="18" cy="828.6191" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="27" y="832.2539">set(array: ArrayLike&lt;number&gt;, offset: number) : void</text><ellipse cx="18" cy="841.5742" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="220" x="27" y="845.209">slice(start: number, end: number) : Buffer</text><ellipse cx="18" cy="854.5293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="27" y="858.1641">some(predicate: Function, thisArg: any) : boolean</text><ellipse cx="18" cy="867.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="184" x="27" y="871.1191">sort(compareFn: Function) : Buffer</text><ellipse cx="18" cy="880.4395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="244" x="27" y="884.0742">subarray(start: number, end: number) : Buffer</text><ellipse cx="18" cy="893.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="90" x="27" y="897.0293">swap16() : Buffer</text><ellipse cx="18" cy="906.3496" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="90" x="27" y="909.9844">swap32() : Buffer</text><ellipse cx="18" cy="919.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="90" x="27" y="922.9395">swap64() : Buffer</text><ellipse cx="18" cy="932.2598" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="89" x="27" y="935.8945">toJSON() : Object</text><ellipse cx="18" cy="945.2148" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="27" y="948.8496">toLocaleString() : string</text><ellipse cx="18" cy="958.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="27" y="961.8047">toString(encoding: BufferEncoding, start: number, end: number) : string</text><ellipse cx="18" cy="971.125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="27" y="974.7598">valueOf() : Uint8Array</text><ellipse cx="18" cy="984.0801" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="191" x="27" y="987.7148">values() : IterableIterator&lt;number&gt;</text><ellipse cx="18" cy="997.0352" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="299" x="27" y="1000.6699">write(string: string, encoding: BufferEncoding) : number</text><ellipse cx="18" cy="1009.9902" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="384" x="27" y="1013.625">write(string: string, offset: number, encoding: BufferEncoding) : number</text><ellipse cx="18" cy="1022.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="472" x="27" y="1026.5801">write(string: string, offset: number, length: number, encoding: BufferEncoding) : number</text><ellipse cx="18" cy="1035.9004" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="27" y="1039.5352">writeBigInt64BE(value: bigint, offset: number) : number</text><ellipse cx="18" cy="1048.8555" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="27" y="1052.4902">writeBigInt64LE(value: bigint, offset: number) : number</text><ellipse cx="18" cy="1061.8105" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="299" x="27" y="1065.4453">writeBigUInt64BE(value: bigint, offset: number) : number</text><ellipse cx="18" cy="1074.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="299" x="27" y="1078.4004">writeBigUInt64LE(value: bigint, offset: number) : number</text><ellipse cx="18" cy="1087.7207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="27" y="1091.3555">writeDoubleBE(value: number, offset: number) : number</text><ellipse cx="18" cy="1100.6758" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="27" y="1104.3105">writeDoubleLE(value: number, offset: number) : number</text><ellipse cx="18" cy="1113.6309" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="27" y="1117.2656">writeFloatBE(value: number, offset: number) : number</text><ellipse cx="18" cy="1126.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="284" x="27" y="1130.2207">writeFloatLE(value: number, offset: number) : number</text><ellipse cx="18" cy="1139.541" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="27" y="1143.1758">writeInt16BE(value: number, offset: number) : number</text><ellipse cx="18" cy="1152.4961" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="27" y="1156.1309">writeInt16LE(value: number, offset: number) : number</text><ellipse cx="18" cy="1165.4512" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="27" y="1169.0859">writeInt32BE(value: number, offset: number) : number</text><ellipse cx="18" cy="1178.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="27" y="1182.041">writeInt32LE(value: number, offset: number) : number</text><ellipse cx="18" cy="1191.3613" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="267" x="27" y="1194.9961">writeInt8(value: number, offset: number) : number</text><ellipse cx="18" cy="1204.3164" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="386" x="27" y="1207.9512">writeIntBE(value: number, offset: number, byteLength: number) : number</text><ellipse cx="18" cy="1217.2715" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="386" x="27" y="1220.9063">writeIntLE(value: number, offset: number, byteLength: number) : number</text><ellipse cx="18" cy="1230.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="294" x="27" y="1233.8613">writeUInt16BE(value: number, offset: number) : number</text><ellipse cx="18" cy="1243.1816" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="294" x="27" y="1246.8164">writeUInt16LE(value: number, offset: number) : number</text><ellipse cx="18" cy="1256.1367" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="294" x="27" y="1259.7715">writeUInt32BE(value: number, offset: number) : number</text><ellipse cx="18" cy="1269.0918" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="294" x="27" y="1272.7266">writeUInt32LE(value: number, offset: number) : number</text><ellipse cx="18" cy="1282.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="275" x="27" y="1285.6816">writeUInt8(value: number, offset: number) : number</text><ellipse cx="18" cy="1295.002" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="394" x="27" y="1298.6367">writeUIntBE(value: number, offset: number, byteLength: number) : number</text><ellipse cx="18" cy="1307.957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="394" x="27" y="1311.5918">writeUIntLE(value: number, offset: number, byteLength: number) : number</text><ellipse cx="18" cy="1320.9121" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="27" y="1324.5469">[iterator]() : IterableIterator&lt;number&gt;</text><!--MD5=[cb36e1f5dd1818f987d708963e595f6c]
class Uint8Array--><rect codeLine="98" fill="#FEFECE" filter="url(#f1vu6ylr6pyop0)" height="24.1328" id="Uint8Array" style="stroke:#A80036;stroke-width:1.5;" width="67" x="310" y="7"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="61" x="313" y="23.6016">Uint8Array</text><!--MD5=[51f45e3389fe3530e62a03df3f139412]
reverse link Uint8Array to Buffer--><path codeLine="100" d="M343.5,51.54 C343.5,62.31 343.5,75.53 343.5,90.75 " fill="none" id="Uint8Array-backto-Buffer" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="336.5,51.12,343.5,31.12,350.5,51.12,336.5,51.12" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9d9c88b31c07eee5a3d5be4527584220]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
interface "Buffer" {
    +buffer : ArrayBufferLike
    +byteLength : number
    +byteOffset : number
    +BYTES_PER_ELEMENT : number
    +length : number
    +[toStringTag] : "Uint8Array"
    +at(index: number) : undefined | number
    +compare(target: Uint8Array, targetStart: number, targetEnd: number, sourceStart: number, sourceEnd: number) : number
    +copy(target: Uint8Array, targetStart: number, sourceStart: number, sourceEnd: number) : number
    +copyWithin(target: number, start: number, end: number) : Buffer
    +entries() : IterableIterator<[number, number]>
    +equals(otherBuffer: Uint8Array) : boolean
    +every(predicate: Function, thisArg: any) : boolean
    +fill(value: string | number | Uint8Array, offset: number, end: number, encoding: BufferEncoding) : Buffer
    +filter(predicate: Function, thisArg: any) : Uint8Array
    +find(predicate: Function, thisArg: any) : undefined | number
    +findIndex(predicate: Function, thisArg: any) : number
    +forEach(callbackfn: Function, thisArg: any) : void
    +includes(value: string | number | Buffer, byteOffset: number, encoding: BufferEncoding) : boolean
    +indexOf(value: string | number | Uint8Array, byteOffset: number, encoding: BufferEncoding) : number
    +join(separator: string) : string
    +keys() : IterableIterator<number>
    +lastIndexOf(value: string | number | Uint8Array, byteOffset: number, encoding: BufferEncoding) : number
    +map(callbackfn: Function, thisArg: any) : Uint8Array
    +readBigInt64BE(offset: number) : bigint
    +readBigInt64LE(offset: number) : bigint
    +readBigUInt64BE(offset: number) : bigint
    +readBigUInt64LE(offset: number) : bigint
    +readDoubleBE(offset: number) : number
    +readDoubleLE(offset: number) : number
    +readFloatBE(offset: number) : number
    +readFloatLE(offset: number) : number
    +readInt16BE(offset: number) : number
    +readInt16LE(offset: number) : number
    +readInt32BE(offset: number) : number
    +readInt32LE(offset: number) : number
    +readInt8(offset: number) : number
    +readIntBE(offset: number, byteLength: number) : number
    +readIntLE(offset: number, byteLength: number) : number
    +readUInt16BE(offset: number) : number
    +readUInt16LE(offset: number) : number
    +readUInt32BE(offset: number) : number
    +readUInt32LE(offset: number) : number
    +readUInt8(offset: number) : number
    +readUIntBE(offset: number, byteLength: number) : number
    +readUIntLE(offset: number, byteLength: number) : number
    +reduce(callbackfn: Function) : number
    +reduce(callbackfn: Function, initialValue: number) : number
    +reduce<U>(callbackfn: Function, initialValue: U) : U
    +reduceRight(callbackfn: Function) : number
    +reduceRight(callbackfn: Function, initialValue: number) : number
    +reduceRight<U>(callbackfn: Function, initialValue: U) : U
    +reverse() : Buffer
    +set(array: ArrayLike<number>, offset: number) : void
    +slice(start: number, end: number) : Buffer
    +some(predicate: Function, thisArg: any) : boolean
    +sort(compareFn: Function) : Buffer
    +subarray(start: number, end: number) : Buffer
    +swap16() : Buffer
    +swap32() : Buffer
    +swap64() : Buffer
    +toJSON() : Object
    +toLocaleString() : string
    +toString(encoding: BufferEncoding, start: number, end: number) : string
    +valueOf() : Uint8Array
    +values() : IterableIterator<number>
    +write(string: string, encoding: BufferEncoding) : number
    +write(string: string, offset: number, encoding: BufferEncoding) : number
    +write(string: string, offset: number, length: number, encoding: BufferEncoding) : number
    +writeBigInt64BE(value: bigint, offset: number) : number
    +writeBigInt64LE(value: bigint, offset: number) : number
    +writeBigUInt64BE(value: bigint, offset: number) : number
    +writeBigUInt64LE(value: bigint, offset: number) : number
    +writeDoubleBE(value: number, offset: number) : number
    +writeDoubleLE(value: number, offset: number) : number
    +writeFloatBE(value: number, offset: number) : number
    +writeFloatLE(value: number, offset: number) : number
    +writeInt16BE(value: number, offset: number) : number
    +writeInt16LE(value: number, offset: number) : number
    +writeInt32BE(value: number, offset: number) : number
    +writeInt32LE(value: number, offset: number) : number
    +writeInt8(value: number, offset: number) : number
    +writeIntBE(value: number, offset: number, byteLength: number) : number
    +writeIntLE(value: number, offset: number, byteLength: number) : number
    +writeUInt16BE(value: number, offset: number) : number
    +writeUInt16LE(value: number, offset: number) : number
    +writeUInt32BE(value: number, offset: number) : number
    +writeUInt32LE(value: number, offset: number) : number
    +writeUInt8(value: number, offset: number) : number
    +writeUIntBE(value: number, offset: number, byteLength: number) : number
    +writeUIntLE(value: number, offset: number, byteLength: number) : number
    +[iterator]() : IterableIterator<number>
}
class "Uint8Array"
hide "Uint8Array" circle
"Uint8Array" <|- - "Buffer"
@enduml

PlantUML version 1.2021.6(Fri May 14 09:09:51 CEST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>